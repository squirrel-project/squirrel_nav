<!-- This file shows the most important parameters in their default settings,
     to make them easily available for beginners.

     The openni driver is started automatically -->
<launch>
  <include file="$(find openni_launch)/launch/openni.launch"/>
  <node pkg="squirrel_rgbd_mapping" type="rgbdslam" name="rgbdslam" cwd="node" required="true" output="screen"> 
    <!-- Input data settings-->
    <param name="config/topic_image_mono"              value="/camera/rgb/image_color"/> 
    <param name="config/topic_image_depth"             value="/camera/depth_registered/sw_registered/image_rect_raw"/>

    <param name="config/feature_detector_type"         value="ORB"/><!-- also available: SIFT, SURF, GFTT (good features to track), ORB. -->
    <param name="config/adjuster_max_iterations"       value="10"/><!-- retry this many times if not enough features are detected -->
    <param name="config/detector_grid_resolution"      value="2"/><!-- detect on a 2x2 grid -->
    <param name="config/max_keypoints"                 value="600"/><!-- Extract no more than this many keypoints -->

    <param name="config/feature_extractor_type"        value="ORB"/><!-- also available: SIFT, SIFTGPU, SURF, SURF128 (extended SURF), ORB. -->

    <param name="config/min_sampled_candidates"        value="2"/><!-- Frame-to-frame comparisons to random frames (big loop closures) -->
    <param name="config/predecessor_candidates"        value="2"/><!-- Frame-to-frame comparisons to sequential frames-->
    <param name="config/neighbor_candidates"           value="3"/><!-- Frame-to-frame comparisons to graph neighbor frames-->
    <param name="config/nn_distance_ratio"             value="0.8"/> <!-- Feature correspondence is valid if distance to nearest neighbour is smaller than this parameter times the distance to the 2nd neighbour -->
    <param name="config/ransac_iterations"             value="200"/>
    <param name="config/cloud_creation_skip_step"      value="2"/><!-- subsample the images' pixels (in both, width and height), when creating the cloud -->

  </node>
</launch>
