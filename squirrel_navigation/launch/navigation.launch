<launch>
  <arg name="rviz" default="false" />
  <!--arg name="map_file" default="/home/robotino/git/robotino/src/squirrel_nav/squirrel_navigation/maps/default-map.yaml" /-->
  <arg name="map_file" default="$(find squirrel_navigation)/maps/default-map.yaml" />
  <arg name="robot_id" default="robot1" />
  <arg name="autolocalization" default="false"/>
  <arg name="3d_mapping" default="false" />
  <arg name="kinect_on" value="true" />

  <!--- Run mapserver -->
  <include file="$(find squirrel_navigation)/launch/map_server.launch">
    <arg name="map_file" value="$(arg map_file)" />
  </include>

  <!-- AMCL node -->
  <!-- <node pkg="amcl" type="amcl" name="amcl" output="screen"> -->
  <!--   <rosparam file="$(find squirrel_navigation)/config/robot1/amcl/amcl_params.yaml" command="load"/> -->
  <!-- </node> -->

  <!-- Run Monte Carlo Localization -->
  <include file="$(find squirrel_localizer)/launch/squirrel_localizer.launch"/>

  <!-- Run pointcloud_filter_node: filter the PointCloud to speed up planning -->
  <node pkg="squirrel_navigation" type="pointcloud_filter_node" name="pointcloud_filter"
	output="screen" respawn="true" if="$(arg kinect_on)" >
    <param name="pointcloud_in" value="/kinect/depth/points" />
    <param name="pointcloud_out" value="/rgbdscan" />
    <param name="pointcloud_size" value="6500" />
  </node>

  <!-- Run autolocalization_node: localize the robot before starting navigation tasks -->
  <node pkg="squirrel_navigation" type="autolocalization_node" name="autolocalization"
	output="screen" if="$(arg autolocalization)" >
    <param name="global_localization" value="false" />
    <param name="max_angular_vel" value="0.8" />
    <param name="max_linear_vel" value="0.1" />
    <param name="tolerance_var_x" value="0.05" />
    <param name="tolerance_var_y" value="0.05" />
    <param name="tolerance_var_th" value="0.05" />
  </node>
  
  <!--- Run move_base: execute the navigation tasks -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find squirrel_navigation)/config/$(arg robot_id)/move_base/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find squirrel_navigation)/config/$(arg robot_id)/move_base/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find squirrel_navigation)/config/$(arg robot_id)/move_base/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find squirrel_navigation)/config/$(arg robot_id)/move_base/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find squirrel_navigation)/config/$(arg robot_id)/move_base/base_local_planner_params.yaml" command="load" />
    <rosparam file="$(find squirrel_navigation)/config/$(arg robot_id)/move_base/base_local_planner_trajectory_ros_params.yaml" command="load" />
    <rosparam file="$(find squirrel_navigation)/config/$(arg robot_id)/move_base/move_base_params.yaml" command="load" />
  </node>

  <!-- Run the octomap server and the 3d collision check -->
  <include file="$(find squirrel_3d_mapping)/launch/3d_mapping.launch" if="$(arg 3d_mapping)"/>

  <!-- Run the planner for pushing task -->
  <include file="$(find squirrel_pushing_planner)/launch/pushing_planner.launch">
    <arg name="tolerance" value="0.05" />
    <arg name="robot_radius" value="0.22" />
    <arg name="start_goal_frame_id" value="/map" />
    <arg name="plan_frame_id" value="/odom" />
    <!--arg name="plan_frame_id" value="/odom" /-->
  </include>

  <!-- Run rviz -->
  <include file="$(find squirrel_navigation)/launch/rviz.launch" if="$(arg rviz)">
    <arg name="mapping" value="false"/>
    <arg name="robot" value="$(arg robot_id)"/>
  </include>
</launch>
